[{"/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/index.js":"1","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/App.js":"2","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/reportWebVitals.js":"3","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/Menu/Menu.js":"4","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/SearchPanel/SearchPanel.js":"5","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/NoteBoard/NoteBoard.js":"6","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/NoteItem/NoteItem.js":"7","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/HorizontalMenu/HorizontalMenu.js":"8","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/NewNoteModal/NewNoteModal.js":"9","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/ProfileSettings/ProfileSettings.js":"10","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/MyFolders/MyFolders.js":"11","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/Folder/Folder.js":"12"},{"size":500,"mtime":1612364689900,"results":"13","hashOfConfig":"14"},{"size":8086,"mtime":1612370554948,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1611502036350,"results":"16","hashOfConfig":"14"},{"size":2031,"mtime":1612370552752,"results":"17","hashOfConfig":"14"},{"size":632,"mtime":1611787614012,"results":"18","hashOfConfig":"14"},{"size":822,"mtime":1612191405499,"results":"19","hashOfConfig":"14"},{"size":1322,"mtime":1612019028322,"results":"20","hashOfConfig":"14"},{"size":2481,"mtime":1612195660265,"results":"21","hashOfConfig":"14"},{"size":3997,"mtime":1612294253953,"results":"22","hashOfConfig":"14"},{"size":2637,"mtime":1612369496953,"results":"23","hashOfConfig":"14"},{"size":427,"mtime":1612372198756,"results":"24","hashOfConfig":"14"},{"size":3433,"mtime":1612372183691,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13m148i",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/index.js",[],"/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/App.js",["56"],"/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/reportWebVitals.js",[],["57","58"],"/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/Menu/Menu.js",["59","60","61","62","63","64","65","66"],"/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/SearchPanel/SearchPanel.js",[],"/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/NoteBoard/NoteBoard.js",["67","68"],"import React, { Component } from \"react\";\nimport NoteItem from \"../NoteItem/NoteItem\";\n\nimport \"./NoteBoard.css\";\n\nexport default class NoteBoard extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { onDelete, todos, onCompleted, isCompleted } = this.props;\n\n    return (\n      <>\n        <div className=\"noteBoard-container\">\n          {todos.map(todo => {\n            if (todo.id) {\n              return (\n                <NoteItem\n                  todo={todo}\n                  key={todo.id}\n                  onDelete={() => onDelete(todo.id)}\n                  onCompleted={() => onCompleted(todo.id)}\n                  id={todo.id}\n                  isCompleted={isCompleted}\n                />\n              );\n            }\n          })}\n        </div>\n      </>\n    );\n  }\n}\n","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/NoteItem/NoteItem.js",["69"],"import React, { Component } from \"react\";\n\nimport \"./NoteItem.css\";\nimport pin from \"./NoteItemIcons/pin.svg\";\n\nexport default class NoteItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isCompleted: false\n    };\n  }\n\n  onCompleted() {\n    this.setState(({ isCompleted }) => {\n      return {\n        isCompleted: !isCompleted\n      };\n    });\n  }\n\n  render() {\n    const { todo, onDelete /* , onCompleted */ } = this.props;\n    let classNames = \"done_false\";\n    if (this.state.isCompleted) {\n      classNames = \"done_true\";\n    }\n\n    return (\n      <>\n        <div className=\"note-item\">\n          <div className=\"pin\">\n            <img src={pin} />\n          </div>\n          <div className=\"functions\">\n            <div className=\"functions1\">\n              <div className=\"delete\" onClick={onDelete} />\n              <div className={classNames} onClick={() => this.onCompleted()} />\n              <div className=\"change\" />\n            </div>\n            <div className=\"functions2\">\n              <div className=\"settings\" />\n            </div>\n          </div>\n          <div className=\"note-title\">{todo.title}</div>\n          <div className=\"note-text-container\">\n            <p className=\"note-text\">{todo.text}</p>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/HorizontalMenu/HorizontalMenu.js",["70","71","72","73"],"import React, { Component } from \"react\";\nimport NewNoteModal from \"../NewNoteModal/NewNoteModal\";\n\nimport \"./HorizontalMenu.css\";\nimport completed from \"./HorizontalMenuIcons/completed.svg\";\nimport newNote from \"./HorizontalMenuIcons/newNote.svg\";\nimport recentlyDeleted from \"./HorizontalMenuIcons/recentlyDeleted.svg\";\nimport sort from \"./HorizontalMenuIcons/sort.svg\";\n\nexport default class HorizontalMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isModalOpened: false\n    };\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({\n      isModalOpened: true\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      isModalOpened: false\n    });\n  }\n\n  render() {\n    const { onEnterCloseModal, addItem, isHomePage, openHomePage } = this.props;\n    let homeClass = \"folders\";\n    if (isHomePage) {\n      homeClass = \"folders_active\";\n    } else {\n      homeClass = \"folders\";\n    }\n\n    return (\n      <>\n        <div className=\"horison-menu\">\n          <div className=\"horison-menu-first-block\">\n            <div className=\"new-note\" onClick={() => this.openModal()}>\n              <img src={newNote} alt=\"new note image\" />\n              <p className=\"hor-menu-item-text\">new note</p>\n            </div>\n            <div className=\"completed\">\n              <img src={completed} alt=\"completed image\" />\n              <p className=\"hor-menu-item-text\">completed</p>\n            </div>\n            {/* <div className=\"recently-deleted\">\n              <img src={recentlyDeleted} alt=\"recently deleted image\" />\n              <p className=\"hor-menu-item-text\">Recently deleted</p>\n            </div> */}\n          </div>\n          <div className=\"horison-menu-second-block\">\n            <div className=\"folders\">Folders</div>\n            <div className={homeClass} onClick={() => openHomePage()}>\n              Home\n            </div>\n            <div className=\"folders\">Calendar</div>\n          </div>\n          <div className=\"horison-menu-third-block\">\n            {/* <div className=\"sort\">\n              <img src={sort} alt=\"sort image\" />\n              sort by\n            </div> */}\n          </div>\n        </div>\n        {this.state.isModalOpened && (\n          <NewNoteModal\n            isOpened={this.state.isModalOpened}\n            closeModal={this.closeModal}\n            addItem={addItem}\n            onEnterCloseModal={onEnterCloseModal}\n          />\n        )}\n      </>\n    );\n  }\n}\n","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/NewNoteModal/NewNoteModal.js",["74","75"],"import React, { Component } from \"react\";\n\nimport \"./NewNoteModal.css\";\n\nexport default class NewNoteModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      text: \"\",\n      isActive: this.props.isOpened\n    };\n    this.onValueChangeTitle = this.onValueChangeTitle.bind(this);\n    this.onValueChangeText = this.onValueChangeText.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onValueChangeTitle(e) {\n    // event нужен для того, что бы получать именно value из input\n    this.setState({\n      title: e.target.value\n    });\n  }\n\n  onValueChangeText(e) {\n    // event нужен для того, что бы получать именно value из input\n    this.setState({\n      text: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    //  Во время события отправки формы, будет вызываться функция создания нового поста, куда передаем данные из стейта\n    this.props.addItem(this.state.title, this.state.text);\n    /* Получается:\n    1) Мы отслеживаем события изменения внутри формы\n    2) Отслежимаем когда пользователь отправит нашу форму\n    3) при отправке срабатывает onSubmit функция и она вызывает метод addItem, который принимает в себя необходимые данные из стейта */\n    this.setState({\n      title: \"\",\n      text: \"\"\n    });\n  }\n\n  render() {\n    const { title, text } = this.state;\n    const { closeModal, onEnterCloseModal } = this.props;\n    const {} = this.state;\n    const {} = this.state;\n    if (this.state.isActive) {\n      return (\n        <>\n          <div className=\"new-note-container\">\n            <div className=\"new-note-modal\">\n              <div className=\"modal-title\">\n                <p>New note</p>\n                <div className=\"delete-btn\" onClick={() => closeModal()}>\n                  <svg\n                    width=\"16\"\n                    height=\"16\"\n                    viewBox=\"0 0 16 16\"\n                    fill=\"none\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <circle cx=\"8\" cy=\"8\" r=\"8\" fill=\"#FF4D4D\" />\n                    <path\n                      d=\"M5.17163 5.17163L10.8285 10.8285\"\n                      stroke=\"white\"\n                      stroke-width=\"2\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                    />\n                    <path\n                      d=\"M10.8285 5.17163L5.17164 10.8285\"\n                      stroke=\"white\"\n                      stroke-width=\"2\"\n                      stroke-linecap=\"round\"\n                      stroke-linejoin=\"round\"\n                    />\n                  </svg>\n                </div>\n              </div>\n              <form onSubmit={this.onSubmit}>\n                <input\n                  type=\"text\"\n                  placeholder=\"title\"\n                  className=\"new-note-title\"\n                  /* Отслеживаем изменения в инпуте */\n                  onChange={this.onValueChangeTitle}\n                  value={title}\n                />\n                <textarea\n                  type=\"textarea\"\n                  placeholder=\"note text\"\n                  rows=\"10\"\n                  cols=\"12\"\n                  onChange={this.onValueChangeText}\n                  value={text}\n                ></textarea>\n                <button\n                  className=\"btn-add\"\n                  type=\"submit\"\n                  onClick={onEnterCloseModal}\n                >\n                  add\n                </button>\n              </form>\n            </div>\n          </div>\n        </>\n      );\n    } else {\n      return <></>;\n    }\n  }\n}\n","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/ProfileSettings/ProfileSettings.js",["76","77","78"],"import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./ProfileSettings.css\";\n\nimport photo from \"../Menu/MenuImg/photo.jpg\";\nimport noAvatar from \"../images/noAvatar.jpg\";\n\nexport default class ProfileSettings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newName: \"name\",\n      newSurname: \"surname\",\n      avatar: photo\n    };\n    this.onValueChangeName = this.onValueChangeName.bind(this);\n    this.onValueChangeSurname = this.onValueChangeSurname.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onValueChangeName(e) {\n    this.setState({\n      newName: e.target.value\n    });\n  }\n\n  onValueChangeSurname(e) {\n    this.setState({\n      newSurname: e.target.value\n    });\n  }\n\n  onChangePhoto(e) {\n    // e.target.files[0] - файл который я добавил\n    let newAvatar = e.target.files[0];\n  }\n\n  fileUploadHendler = () => {\n    axios.post(\"\");\n  };\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    this.props.changeFullName(this.state.newName, this.state.newSurname);\n\n    this.props.changeAvatar(this.state.avatar);\n  }\n\n  render() {\n    const { avatar, name, surname } = this.props;\n    const { newName, newSurname } = this.state;\n    return (\n      <>\n        <div className=\"prof-settings-container\">\n          <div className=\"prof-title-desct\">\n            <div className=\"prof-title\">Profile settings</div>\n            <div className=\"prof-descr\">\n              Profile settings allows you to change your profile picture and\n              adjust your account information\n            </div>\n          </div>\n          <form onSubmit={this.onSubmit} className=\"prof-set-form\">\n            <img className=\"photo\" src={avatar} />\n            <div className=\"prof-name-surname\">\n              <input\n                type=\"name\"\n                placeholder={name}\n                className=\"pr-set-input\"\n                onChange={this.onValueChangeName}\n                value={newName}\n              />\n              <input\n                type=\"surname\"\n                placeholder={surname}\n                className=\"pr-set-input\"\n                onChange={this.onValueChangeSurname}\n                value={newSurname}\n              />\n            </div>\n            <div className=\"add-photo\">\n              <input\n                type=\"file\"\n                accept=\".jpeg, .png, .jpg\"\n                onChange={this.onChangePhoto}\n              />\n            </div>\n            <button className=\"btn-add mr-zero mb15\" type=\"submit\">\n              change\n            </button>\n          </form>\n        </div>\n      </>\n    );\n  }\n}\n","/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/MyFolders/MyFolders.js",[],"/Users/mathiasweiss/Desktop/desktop/it/проекты/web/2021/sb-notes/src/Folder/Folder.js",["79","80"],{"ruleId":"81","severity":1,"message":"82","line":8,"column":8,"nodeType":"83","messageId":"84","endLine":8,"endColumn":16},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"81","severity":1,"message":"89","line":8,"column":8,"nodeType":"83","messageId":"84","endLine":8,"endColumn":13},{"ruleId":"90","severity":1,"message":"91","line":11,"column":3,"nodeType":"92","messageId":"93","endLine":13,"endColumn":4},{"ruleId":"94","severity":1,"message":"95","line":29,"column":13,"nodeType":"96","endLine":29,"endColumn":56},{"ruleId":"94","severity":1,"message":"95","line":37,"column":17,"nodeType":"96","endLine":37,"endColumn":33},{"ruleId":"94","severity":1,"message":"95","line":43,"column":17,"nodeType":"96","endLine":43,"endColumn":35},{"ruleId":"94","severity":1,"message":"95","line":49,"column":17,"nodeType":"96","endLine":49,"endColumn":37},{"ruleId":"94","severity":1,"message":"95","line":55,"column":17,"nodeType":"96","endLine":55,"endColumn":37},{"ruleId":"94","severity":1,"message":"95","line":62,"column":15,"nodeType":"96","endLine":62,"endColumn":33},{"ruleId":"90","severity":1,"message":"91","line":7,"column":3,"nodeType":"92","messageId":"93","endLine":9,"endColumn":4},{"ruleId":"97","severity":1,"message":"98","line":17,"column":27,"nodeType":"99","messageId":"100","endLine":17,"endColumn":29},{"ruleId":"94","severity":1,"message":"95","line":33,"column":13,"nodeType":"96","endLine":33,"endColumn":30},{"ruleId":"81","severity":1,"message":"101","line":7,"column":8,"nodeType":"83","messageId":"84","endLine":7,"endColumn":23},{"ruleId":"81","severity":1,"message":"102","line":8,"column":8,"nodeType":"83","messageId":"84","endLine":8,"endColumn":12},{"ruleId":"103","severity":1,"message":"104","line":45,"column":15,"nodeType":"96","endLine":45,"endColumn":57},{"ruleId":"103","severity":1,"message":"104","line":49,"column":15,"nodeType":"96","endLine":49,"endColumn":60},{"ruleId":"105","severity":1,"message":"106","line":49,"column":11,"nodeType":"107","messageId":"108","endLine":49,"endColumn":13},{"ruleId":"105","severity":1,"message":"106","line":50,"column":11,"nodeType":"107","messageId":"108","endLine":50,"endColumn":13},{"ruleId":"81","severity":1,"message":"82","line":6,"column":8,"nodeType":"83","messageId":"84","endLine":6,"endColumn":16},{"ruleId":"81","severity":1,"message":"109","line":35,"column":9,"nodeType":"83","messageId":"84","endLine":35,"endColumn":18},{"ruleId":"94","severity":1,"message":"95","line":64,"column":13,"nodeType":"96","endLine":64,"endColumn":51},{"ruleId":"81","severity":1,"message":"110","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":7,"column":3,"nodeType":"92","messageId":"93","endLine":9,"endColumn":4},"no-unused-vars","'noAvatar' is defined but never used.","Identifier","unusedVar","no-native-reassign",["111"],"no-negated-in-lhs",["112"],"'photo' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'recentlyDeleted' is defined but never used.","'sort' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'newAvatar' is assigned a value but never used.","'folder' is defined but never used.","no-global-assign","no-unsafe-negation"]